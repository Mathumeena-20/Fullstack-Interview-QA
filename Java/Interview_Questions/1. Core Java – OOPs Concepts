## ✅ 1. What are the 4 Pillars of OOP in Java?

### The four main principles of Object-Oriented Programming in Java:

1. **Encapsulation**
2. **Abstraction**
3. **Inheritance**
4. **Polymorphism**

---

### 1. **Encapsulation**

**Definition**: Wrapping data (variables) and methods into a single unit (class), and restricting access to them using access modifiers.

**Example:**

class Main{
    public static void main(String[] args){
        Employee emp = new Employee();
        emp.setSalary(60000);
        System.out.println("Employer Salary: "+emp.getSalary());
    }
}

class Employee{
    private int salary;
    
    public void setSalary(int s){
        salary = s;
    }
    public int getSalary(){
        return salary;
    }

### 2. **Abstraction**

**Definition**: Hiding internal implementation details and showing only functionality.

**Example:**

```java
abstract class Vehicle {
    abstract void start();
}

class Car extends Vehicle {
    void start() {
        System.out.println("Car is starting...");
    }
}
```

* `Vehicle` provides an abstract concept; `Car` provides implementation.

---

### 3. **Inheritance**

**Definition**: One class inherits properties and methods from another.

**Example:**

```java
class Animal {
    void eat() {
        System.out.println("This animal eats food");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Dog barks");
    }
}
```

* `Dog` inherits from `Animal`.

---

### 4. **Polymorphism**

**Definition**: Ability of one interface to be used for different underlying forms (data types).

(Explained in more detail below in Question 3)

---

## ✅ 2. Difference between Abstraction and Encapsulation?

| Feature        | Abstraction                                           | Encapsulation                                                                  |
| -------------- | ----------------------------------------------------- | ------------------------------------------------------------------------------ |
| Purpose        | Hides **implementation details**                      | Hides **data** using access modifiers                                          |
| Focus          | **What** an object does                               | **How** the object hides internal state                                        |
| Implementation | Achieved using **abstract classes** or **interfaces** | Achieved using **classes**, **private fields**, and **public getters/setters** |
| Example        | Abstract class/interface                              | Private fields with getter/setter                                              |

---

## ✅ 3. What is Polymorphism?

### Polymorphism: "Many forms"

Types:

1. **Compile-time Polymorphism (Method Overloading)**
2. **Run-time Polymorphism (Method Overriding)**

---

### ▶ Compile-Time Polymorphism – Method Overloading

**Same method name, different parameters**

```java
class Calculator {
    int add(int a, int b) {
        return a + b;
    }
    double add(double a, double b) {
        return a + b;
    }
}
```

---

### ▶ Run-Time Polymorphism – Method Overriding

**Subclass provides its own implementation**

```java
class Animal {
    void sound() {
        System.out.println("Some sound");
    }
}
class Dog extends Animal {
    void sound() {
        System.out.println("Dog barks");
    }
}
```

```java
Animal obj = new Dog();  
obj.sound(); // Outputs: Dog barks
```

---

## ✅ 4. Difference Between Interface and Abstract Class

| Feature          | Abstract Class                   | Interface (Java 8+)                                                                   |
| ---------------- | -------------------------------- | ------------------------------------------------------------------------------------- |
| Methods          | Can have abstract + concrete     | All methods are **abstract** by default (Java 7) <br> Java 8+ allows default & static |
| Variables        | Can have instance variables      | Only `public static final` (constants)                                                |
| Inheritance      | Can extend 1 abstract class only | Can implement multiple interfaces                                                     |
| Access Modifiers | Can be `public`, `protected`     | All methods are `public` by default                                                   |

**Example:**

```java
abstract class Animal {
    abstract void makeSound();
}

interface Flyable {
    void fly();
}
```

---

## ✅ 5. Can we create an object of an abstract class or interface?

❌ **No**, we cannot create an object of:

* An **abstract class** (it’s incomplete)
* An **interface** (no implementation)

✅ But we can create a **reference variable** of an abstract class/interface and point to a subclass object.

```java
Animal a = new Dog();       // Valid
Flyable f = new Bird();     // Valid
Animal obj = new Animal();  // ❌ Invalid
```

---

## ✅ 6. Explain IS-A and HAS-A Relationship

### ▶ IS-A: Inheritance

Used when one class is a subtype of another.

```java
class Dog extends Animal {
    // Dog IS-A Animal
}
```

### ▶ HAS-A: Composition (Using objects inside another class)

```java
class Engine {}

class Car {
    private Engine engine = new Engine(); // Car HAS-A Engine
}
```

---

## ✅ 7. Method Overloading vs Method Overriding

| Feature            | Method Overloading                 | Method Overriding                           |
| ------------------ | ---------------------------------- | ------------------------------------------- |
| Definition         | Same method name, different params | Same method name/signature, different class |
| Compile/Runtime    | Compile-time polymorphism          | Run-time polymorphism                       |
| Class Relationship | Same class                         | Parent-child class                          |
| Access             | No restriction                     | Cannot reduce visibility                    |
| Static methods     | Can be overloaded                  | Cannot be overridden                        |

### Overloading Example:

```java
class Print {
    void show(int x) { System.out.println(x); }
    void show(String x) { System.out.println(x); }
}
```

### Overriding Example:

```java
class Animal {
    void sound() { System.out.println("Some sound"); }
}
class Cat extends Animal {
    void sound() { System.out.println("Meow"); }
}
```
