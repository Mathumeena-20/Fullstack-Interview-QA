
### âœ… **1. Core Python Basics**

* What are Python's key features? Why is it popular?
* Explain Python's memory management.
* Difference between **list**, **tuple**, and **set** in Python.
* What is the difference between **is** and **==** in Python?
* How are **mutable** and **immutable** objects different in Python?
* What are **Python data types**? Give examples.
* How does Python handle **type conversion** (implicit vs explicit)?
* What are **Python namespaces** and **scope (LEGB rule)**?
* What is the **difference between Python 2 and Python 3**?

---

### âœ… **2. OOP in Python**

* Explain **OOP principles** in Python: Encapsulation, Inheritance, Polymorphism, Abstraction.
* How do you implement **inheritance** in Python? Give an example.
* Explain **method overloading** and **method overriding** in Python.
* What is the difference between **@staticmethod**, **@classmethod**, and instance methods?
* How do you achieve **data hiding** in Python?
* Explain **multiple inheritance** in Python. How does the MRO (Method Resolution Order) work?

---

### âœ… **3. Functions and Decorators**

* How do you define and call a **function** in Python?
* Explain \***args** and **\*\*kwargs** in Python functions.
* What is a **lambda function**? Give an example.
* Explain **map()**, **filter()**, and **reduce()** functions with examples.
* What is a **decorator** in Python? Write an example.
* Explain **closure** in Python with an example.

---

### âœ… **4. Error Handling**

* How do you handle **exceptions** in Python?
* What is the difference between **Exception** and **Error**?
* Explain **try-except-finally** with an example.
* What is **raise** in Python? How is it used?

---

### âœ… **5. Advanced Python Concepts**

* What are **iterators** and **generators**? Give examples.
* Explain **yield** in Python.
* What is the difference between **deep copy** and **shallow copy**?
* What is **GIL (Global Interpreter Lock)** in Python? Why is it important?
* Explain **context managers** in Python (with **with** statement).

---

### âœ… **6. Collections and Data Structures**

* What are **Python collections**? Explain **deque**, **defaultdict**, **OrderedDict**.
* Difference between **list**, **array**, and **numpy array**.
* Explain **dictionary** in Python. How does it handle collisions internally?
* How to **sort a list of dictionaries** by a key in Python?

---

### âœ… **7. Python File Handling**

* How do you read and write files in Python?
* Difference between **read()**, **readline()**, and **readlines()**.
* Explain file handling modes (`r`, `w`, `a`, `rb`, etc.).

---

### âœ… **8. Multithreading and Multiprocessing**

* Difference between **threading** and **multiprocessing** in Python.
* How do you create a **thread** in Python?
* Explain **thread synchronization** in Python.
* What is **asyncio** in Python?

---

### âœ… **9. Python and Databases**

* How do you connect to a **PostgreSQL/MySQL** database in Python?
* What is **cursor** in DB API?
* Explain **parameterized queries** to prevent SQL Injection.

---

### âœ… **10. Common Coding Questions**

* Reverse a string in Python (multiple ways).
* Find duplicates in a list without using set().
* Write a Python program to check if a string is a **palindrome**.
* Find the **second largest number** in a list.
* Implement a **binary search** in Python.
* Write a Python function to **count occurrences of each word** in a file.
* Merge two dictionaries into one.

---

### âœ… **11. Django / Flask (if Fullstack Role)**

* Explain **MTV architecture** in Django.
* Difference between **Django ORM** and **raw SQL**.
* How to implement **REST API** in Django/Flask?
* What is **middleware** in Django?

---

ðŸ”¥ Do you want me to **prepare a PDF with 100+ Infosys Python Interview Questions & Answers with examples** for quick revision?
OR
Should I **give you a day-wise preparation plan for Infosys Python interviews (with coding problems + theory)**?
